import { Page } from '@playwright/test';
import Tesseract from 'tesseract.js';

export interface TableStructure {
  [rowIndex: number]: { [colIndex: number]: string };
}

export interface AllTables {
  [tableIndex: number]: TableStructure;
}

/** –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å–ª–æ–≤ –ø–æ —Å—Ç—Ä–æ–∫–∞–º */
function groupWordsByRows(
  words: { text: string; bbox: { x0: number; y0: number; x1: number; y1: number } }[],
  yTolerance = 15
) {
  console.log(`üìä –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ ${words.length} —Å–ª–æ–≤ –ø–æ —Å—Ç—Ä–æ–∫–∞–º...`);
  const rows: Record<number, typeof words> = {};

  for (const word of words.sort((a, b) => a.bbox.y0 - b.bbox.y0)) {
    const y = word.bbox.y0;
    const existingRow = Object.keys(rows).find((k) => Math.abs(Number(k) - y) < yTolerance);
    if (existingRow) rows[existingRow].push(word);
    else rows[y] = [word];
  }

  const grouped = Object.values(rows).map((r) => r.sort((a, b) => a.bbox.x0 - b.bbox.x0));
  console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${grouped.length} —Å—Ç—Ä–æ–∫ –ø–æ—Å–ª–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏`);
  return grouped;
}

/** –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è */
export async function extractStructuredTablesFromCanvas(
  page: Page,
  canvasSelector: string
): Promise<AllTables> {
  const result: AllTables = {};
  console.log(`üîπ –ü–æ–∏—Å–∫ canvas: "${canvasSelector}"`);
  const canvas = await page.$(canvasSelector);
  if (!canvas) {
    console.error('‚ùå Canvas –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return result;
  }

  // –ü–æ–ª—É—á–∞–µ–º bounding box –≤—Å–µ–≥–æ canvas
  const box = await canvas.boundingBox();
  if (!box) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å boundingBox canvas');
    return result;
  }

  console.log(`üìè –†–∞–∑–º–µ—Ä canvas: width=${box.width}, height=${box.height}`);

  // –ù–∞—Ö–æ–¥–∏–º —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ canvas —á–µ—Ä–µ–∑ evaluate
  const contentBox = await page.evaluate((sel) => {
    const c = document.querySelector(sel) as HTMLCanvasElement;
    if (!c) return null;
    const ctx = c.getContext('2d');
    if (!ctx) return null;

    const w = c.width;
    const h = c.height;

    let minX = w, minY = h, maxX = 0, maxY = 0;
    const data = ctx.getImageData(0, 0, w, h).data;

    for (let y = 0; y < h; y++) {
      for (let x = 0; x < w; x++) {
        const idx = (y * w + x) * 4;
        const r = data[idx], g = data[idx + 1], b = data[idx + 2], a = data[idx + 3];

        // –°—á–∏—Ç–∞–µ–º "–∫–æ–Ω—Ç–µ–Ω—Ç–æ–º" –≤—Å–µ –ø–∏–∫—Å–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±–µ–ª—ã–µ –∏–ª–∏ –ø–æ—á—Ç–∏ –±–µ–ª—ã–µ
        if (!(r > 240 && g > 240 && b > 240 && a > 240)) {
          if (x < minX) minX = x;
          if (x > maxX) maxX = x;
          if (y < minY) minY = y;
          if (y > maxY) maxY = y;
        }
      }
    }

    if (minX > maxX || minY > maxY) return null;
    return { x: minX, y: minY, width: maxX - minX + 1, height: maxY - minY + 1 };
  }, canvasSelector);

  if (!contentBox) {
    console.warn('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ canvas, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å canvas');
    contentBox = { x: 0, y: 0, width: box.width, height: box.height };
  }

  console.log(`üî≥ –ö–æ–Ω—Ç–µ–Ω—Ç bounding box:`, contentBox);

  // –°–∫—Ä–∏–Ω—à–æ—Ç —Ç–æ–ª—å–∫–æ –æ–±–ª–∞—Å—Ç–∏ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
  const buffer = await canvas.screenshot({ clip: contentBox });

  console.log('üß† –ó–∞–ø—É—Å–∫ OCR —á–µ—Ä–µ–∑ Tesseract.js...');
  const { data } = await Tesseract.recognize(buffer, 'eng', {
    logger: (info) => console.log(`[OCR] ${info.status}: ${info.progress?.toFixed(2)}`),
  });

  const words = (data.words ?? []).filter((w) => w.text?.trim());
  console.log(`üî† OCR —Ä–∞—Å–ø–æ–∑–Ω–∞–ª ${words.length} —Å–ª–æ–≤`);

  if (!words.length) return result;

  const rows = groupWordsByRows(words);

  const table: TableStructure = {};
  rows.forEach((rowWords, rowIndex) => {
    const rowData: Record<number, string> = {};
    rowWords.forEach((w, colIndex) => (rowData[colIndex] = w.text.trim()));
    table[rowIndex] = rowData;
  });

  result[0] = table;
  console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

  return result;
}
