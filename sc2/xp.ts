import { Page } from '@playwright/test';
import fs from 'fs';
import path from 'path';

/**
 * –î–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –≤—Å–µ—Ö canvas —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∫–ª–∞—Å—Å–æ–º, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ —à–∏—Ä–µ –∏–ª–∏ –≤—ã—à–µ —ç–∫—Ä–∞–Ω–∞.
 */
export async function extractStructuredTablesFromCanvas(
  page: Page,
  targetClass: string
) {
  const LOG = (msg: string) => console.log(`[${new Date().toISOString()}] ${msg}`);

  LOG(`üîç –ò—â–µ–º –∫–∞–Ω–≤–∞—Å—ã —Å –∫–ª–∞—Å—Å–æ–º "${targetClass}"`);
  const canvases = await page.$$('canvas.' + targetClass);
  const total = canvases.length;
  LOG(`üîπ –ù–∞–π–¥–µ–Ω–æ ${total} –∫–∞–Ω–≤–∞—Å–æ–≤`);

  if (!total) {
    LOG('‚ö†Ô∏è –ö–∞–Ω–≤–∞—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–≤–µ—Ä—à–∞–µ–º.');
    return;
  }

  // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  const outDir = path.join(process.cwd(), 'canvas_output');
  if (!fs.existsSync(outDir)) fs.mkdirSync(outDir, { recursive: true });

  for (let i = 0; i < total; i++) {
    LOG(`\nüß© –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–Ω–≤–∞—Å–∞ ‚Ññ${i}`);
    const canvas = canvases[i];

    try {
      const visible = await canvas.isVisible();
      LOG(`üî∏ –í–∏–¥–∏–º–æ—Å—Ç—å: ${visible}`);

      if (!visible) {
        LOG('üîÑ –ö–∞–Ω–≤–∞—Å –Ω–µ–≤–∏–¥–∏–º ‚Äî —Å–∫—Ä–æ–ª–ª–∏–º...');
        await canvas.scrollIntoViewIfNeeded();
        await page.waitForTimeout(500);
      }

      const box = await canvas.boundingBox();
      if (!box) {
        LOG(`‚ö†Ô∏è Canvas #${i}: boundingBox –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –î–µ–ª–∞–µ–º fullPage screenshot.`);
        await page.screenshot({
          path: path.join(outDir, `canvas_fullpage_${i}.png`),
          fullPage: true,
        });
        continue;
      }

      LOG(`üìè –†–∞–∑–º–µ—Ä –∫–∞–Ω–≤–∞—Å–∞: ${box.width.toFixed(1)} x ${box.height.toFixed(1)}`);

      // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (scrollable)
      const pageSize = await page.evaluate(() => ({
        width: document.documentElement.scrollWidth,
        height: document.documentElement.scrollHeight,
      }));
      LOG(`üìú –†–∞–∑–º–µ—Ä –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${pageSize.width} x ${pageSize.height}`);

      // –ï—Å–ª–∏ –∫–∞–Ω–≤–∞—Å –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –æ–∫–Ω–∞ ‚Äî –¥–µ–ª–∞–µ–º fullPage —Å–∫—Ä–∏–Ω—à–æ—Ç
      if (
        box.width > page.viewportSize()!.width ||
        box.height > page.viewportSize()!.height
      ) {
        LOG('üì∏ –ö–∞–Ω–≤–∞—Å —à–∏—Ä–µ/–≤—ã—à–µ —ç–∫—Ä–∞–Ω–∞ ‚Äî —Å–Ω–∏–º–∞–µ–º –≤—Å—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –æ–±—Ä–µ–∑–∞–µ–º –∫–∞–Ω–≤–∞—Å');

        const fullBuffer = await page.screenshot({ fullPage: true });
        const sharp = (await import('sharp')).default;

        const cropped = await sharp(fullBuffer)
          .extract({
            left: Math.max(0, Math.floor(box.x)),
            top: Math.max(0, Math.floor(box.y)),
            width: Math.min(Math.floor(box.width), pageSize.width - Math.floor(box.x)),
            height: Math.min(Math.floor(box.height), pageSize.height - Math.floor(box.y)),
          })
          .toBuffer();

        const filePath = path.join(outDir, `canvas_${i}.png`);
        await fs.promises.writeFile(filePath, cropped);
        LOG(`‚úÖ –°–æ—Ö—Ä–∞–Ω—ë–Ω –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç: ${filePath}`);
      } else {
        LOG('üì∏ –ö–∞–Ω–≤–∞—Å –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–∫–Ω–æ ‚Äî —Å–Ω–∏–º–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é');
        await canvas.screenshot({ path: path.join(outDir, `canvas_${i}.png`) });
        LOG(`‚úÖ –°–æ—Ö—Ä–∞–Ω—ë–Ω canvas_${i}.png`);
      }

    } catch (err: any) {
      LOG(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–Ω–≤–∞—Å–∞ #${i}: ${err.message}`);
      const fallbackPath = path.join(outDir, `canvas_error_fullpage_${i}.png`);
      await page.screenshot({ path: fallbackPath, fullPage: true });
      LOG(`üì∏ Fallback fullPage —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${fallbackPath}`);
    }
  }

  LOG('\nüèÅ –í—Å–µ –∫–∞–Ω–≤–∞—Å—ã —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.');
}
