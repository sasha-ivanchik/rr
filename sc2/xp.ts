import { Page } from '@playwright/test';
import Tesseract from 'tesseract.js';

export interface TableStructure {
  [rowIndex: number]: { [colIndex: number]: string };
}

export interface AllTables {
  [tableIndex: number]: TableStructure;
}

/**
 * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å–ª–æ–≤ –ø–æ —Å—Ç—Ä–æ–∫–∞–º —Å –¥–æ–ø. –ª–æ–≥–∞–º–∏
 */
function groupWordsByRows(
  words: {
    text: string;
    bbox: { x0: number; y0: number; x1: number; y1: number };
  }[],
  yTolerance = 15
) {
  console.log(`üìä –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ ${words.length} —Å–ª–æ–≤ –ø–æ —Å—Ç—Ä–æ–∫–∞–º...`);
  const rows: Record<number, typeof words> = {};

  for (const word of words.sort((a, b) => a.bbox.y0 - b.bbox.y0)) {
    const y = word.bbox.y0;
    const existingRow = Object.keys(rows).find(
      (k) => Math.abs(Number(k) - y) < yTolerance
    );

    if (existingRow) {
      rows[existingRow].push(word);
    } else {
      rows[y] = [word];
    }
  }

  const grouped = Object.values(rows).map((r) => r.sort((a, b) => a.bbox.x0 - b.bbox.x0));
  console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${grouped.length} —Å—Ç—Ä–æ–∫ –ø–æ—Å–ª–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏`);
  return grouped;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
export async function extractStructuredTablesFromCanvas(
  page: Page,
  canvasClass?: string
): Promise<AllTables> {
  const result: AllTables = {};
  const selector = canvasClass ? `canvas.${canvasClass}` : 'canvas';
  console.log(`üîπ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–µ–ª–µ–∫—Ç–æ—Ä: "${selector}"`);

  const canvases = page.locator(selector);
  const count = await canvases.count();
  console.log(`üîπ –ù–∞–π–¥–µ–Ω–æ ${count} –∫–∞–Ω–≤–∞—Å–æ–≤ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É`);

  if (count === 0) {
    console.warn('‚ö†Ô∏è –ö–∞–Ω–≤–∞—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤—ã—Ö–æ–¥–∏–º.');
    return result;
  }

  for (let i = 0; i < count; i++) {
    console.log(`\nüß© –û–±—Ä–∞–±–æ—Ç–∫–∞ canvas #${i}`);
    const canvas = canvases.nth(i);

    try {
      await canvas.scrollIntoViewIfNeeded();
      const box = await canvas.boundingBox();
      if (!box) {
        console.warn(`‚ö†Ô∏è Canvas #${i}: bounding box –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        continue;
      }

      const { width, height } = box;
      console.log(`üìè –†–∞–∑–º–µ—Ä: ${width}x${height}`);

      // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞ –¥–ª—è –∞–≤—Ç–æ-–∑—É–º
      const { width: vw, height: vh } = await page.evaluate(() => ({
        width: window.innerWidth,
        height: window.innerHeight,
      }));

      const zoomOut = Math.min(1, vw / width, vh / height);
      console.log(`üîç –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π zoom scale: ${zoomOut.toFixed(2)}`);

      if (zoomOut < 1) {
        console.log(`üìâ –ü—Ä–∏–º–µ–Ω—è–µ–º zoom: ${zoomOut}`);
        await page.evaluate((scale) => {
          document.body.style.transformOrigin = '0 0';
          document.body.style.transform = `scale(${scale})`;
        }, zoomOut);
        await page.waitForTimeout(150);
      }

      console.log(`üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç canvas #${i}...`);
      const buffer = await canvas.screenshot();

      if (zoomOut < 1) {
        await page.evaluate(() => {
          document.body.style.transform = '';
        });
      }

      console.log(`üß† OCR —á–µ—Ä–µ–∑ Tesseract –¥–ª—è canvas #${i}...`);
      const { data } = await Tesseract.recognize(buffer, 'eng', {
        logger: (info) =>
          console.log(`[Canvas ${i} OCR] ${info.status}: ${info.progress?.toFixed(2)}`),
      });

      const words = (data.words ?? []).filter((w) => w.text?.trim());
      console.log(`üî† –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ ${words.length} —Å–ª–æ–≤`);

      if (words.length === 0) {
        console.warn(`‚ö†Ô∏è Canvas #${i}: OCR –Ω–µ –Ω–∞—à—ë–ª —Ç–µ–∫—Å—Ç–∞`);
        continue;
      }

      const rows = groupWordsByRows(words);
      console.log(`üìã Canvas #${i}: ${rows.length} —Å—Ç—Ä–æ–∫ –ø–æ—Å–ª–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏`);

      const table: TableStructure = {};
      rows.forEach((rowWords, rowIndex) => {
        const rowData: Record<number, string> = {};
        rowWords.forEach((w, colIndex) => {
          rowData[colIndex] = w.text.trim();
        });
        console.log(`üßæ Row ${rowIndex}:`, rowData);
        table[rowIndex] = rowData;
      });

      result[i] = table;
      console.log(`‚úÖ Canvas #${i} –≥–æ—Ç–æ–≤ (—Å—Ç—Ä–æ–∫: ${Object.keys(table).length})`);
    } catch (err) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ canvas #${i}:`, err);
    }
  }

  console.log(`\nüèÅ –í—Å–µ –∫–∞–Ω–≤–∞—Å—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã`);
  return result;
}
