import { Page } from '@playwright/test';
import Tesseract from 'tesseract.js';

export interface TableStructure {
  [rowIndex: number]: { [colIndex: number]: string };
}

export interface AllTables {
  [tableIndex: number]: TableStructure;
}

/**
 * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å–ª–æ–≤ –ø–æ —Å—Ç—Ä–æ–∫–∞–º
 */
function groupWordsByRows(
  words: { text: string; bbox: { x0: number; y0: number; x1: number; y1: number } }[],
  yTolerance = 15
) {
  console.log(`üìä –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ ${words.length} —Å–ª–æ–≤ –ø–æ —Å—Ç—Ä–æ–∫–∞–º...`);
  const rows: Record<number, typeof words> = {};

  for (const word of words.sort((a, b) => a.bbox.y0 - b.bbox.y0)) {
    const y = word.bbox.y0;
    const existingRow = Object.keys(rows).find((k) => Math.abs(Number(k) - y) < yTolerance);
    if (existingRow) rows[existingRow].push(word);
    else rows[y] = [word];
  }

  const grouped = Object.values(rows).map((r) => r.sort((a, b) => a.bbox.x0 - b.bbox.x0));
  console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${grouped.length} —Å—Ç—Ä–æ–∫ –ø–æ—Å–ª–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏`);
  return grouped;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: OCR –¥–ª—è –≤—Å–µ—Ö canvas —á–µ—Ä–µ–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è
 */
export async function extractStructuredTablesFromCanvas(
  page: Page,
  containerSelector: string
): Promise<AllTables> {
  const result: AllTables = {};

  console.log(`üîπ –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: "${containerSelector}"`);
  const container = await page.$(containerSelector);
  if (!container) {
    console.error(`‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä "${containerSelector}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    return result;
  }

  console.log(`üîπ –°–∫—Ä–æ–ª–ª–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ –≤–∏–¥–∏–º—É—é –æ–±–ª–∞—Å—Ç—å...`);
  await container.scrollIntoViewIfNeeded();
  await page.waitForTimeout(500);

  // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
  const box = await container.boundingBox();
  if (!box) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å boundingBox –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞');
    return result;
  }

  console.log(`üìè –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: width=${box.width.toFixed(1)}, height=${box.height.toFixed(1)}`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –≤—å—é–ø–æ—Ä—Ç–∞
  const viewport = page.viewportSize();
  if (!viewport) {
    console.warn('‚ö†Ô∏è Viewport –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä');
  }

  // –ü—Ä–∏–º–µ–Ω—è–µ–º –∑—É–º-–∞—É—Ç, –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –±–æ–ª—å—à–µ —ç–∫—Ä–∞–Ω–∞
  let zoomOut = 1;
  if (viewport) {
    zoomOut = Math.min(1, viewport.width / box.width, viewport.height / box.height);
    if (zoomOut < 1) {
      console.log(`üîç –ü—Ä–∏–º–µ–Ω—è–µ–º zoom-–∞—É—Ç: ${zoomOut.toFixed(2)}`);
      await page.evaluate((scale) => {
        document.body.style.transformOrigin = '0 0';
        document.body.style.transform = `scale(${scale})`;
      }, zoomOut);
      await page.waitForTimeout(500);
    }
  }

  console.log('üì∏ –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...');
  const buffer = await container.screenshot();

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—à—Ç–∞–± –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É
  if (zoomOut < 1) {
    await page.evaluate(() => {
      document.body.style.transform = '';
    });
  }

  console.log('üß† –ó–∞–ø—É—Å–∫ OCR —á–µ—Ä–µ–∑ Tesseract.js...');
  const { data } = await Tesseract.recognize(buffer, 'eng', {
    logger: (info) => console.log(`[OCR] ${info.status}: ${info.progress?.toFixed(2)}`),
  });

  const words = (data.words ?? []).filter((w) => w.text?.trim());
  console.log(`üî† OCR —Ä–∞—Å–ø–æ–∑–Ω–∞–ª ${words.length} —Å–ª–æ–≤`);

  if (!words.length) {
    console.warn('‚ö†Ô∏è OCR –Ω–µ –Ω–∞—à—ë–ª —Ç–µ–∫—Å—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ');
    return result;
  }

  const rows = groupWordsByRows(words);
  console.log(`üìã –ü–æ–ª—É—á–µ–Ω–æ ${rows.length} —Å—Ç—Ä–æ–∫ –ø–æ—Å–ª–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏`);

  const table: TableStructure = {};
  rows.forEach((rowWords, rowIndex) => {
    const rowData: Record<number, string> = {};
    rowWords.forEach((w, colIndex) => {
      rowData[colIndex] = w.text.trim();
    });
    table[rowIndex] = rowData;
  });

  result[0] = table;
  console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

  return result;
}
