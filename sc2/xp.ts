import { Page } from 'playwright';
import Tesseract from 'tesseract.js';

/**
 * –†–∞—Å–ø–æ–∑–Ω–∞—ë—Ç —Ç–µ–∫—Å—Ç —Å –∫–∞–Ω–≤–∞—Å–æ–≤ (–ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∫–ª–∞—Å—Å—É) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å–ª–æ–≤–∞—Ä–µ–π
 */
export async function extractCanvasTables(page: Page, canvasClass: string) {
  console.log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞–Ω–≤–∞—Å–æ–≤ —Å –∫–ª–∞—Å—Å–æ–º "${canvasClass}"`);

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞–Ω–≤–∞—Å—ã —Å –Ω—É–∂–Ω—ã–º –∫–ª–∞—Å—Å–æ–º
  const canvases = await page.$$('canvas');
  console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${canvases.length} –∫–∞–Ω–≤–∞—Å–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ`);

  // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–ª–∞—Å—Å—É
  const filteredCanvases = [];
  for (const [i, canvas] of canvases.entries()) {
    const cls = await canvas.getAttribute('class');
    if (cls?.includes(canvasClass)) {
      filteredCanvases.push(canvas);
      console.log(`‚úÖ Canvas #${i} (${cls}) –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ —Ñ–∏–ª—å—Ç—Ä`);
    } else {
      console.log(`‚è≠Ô∏è Canvas #${i} (${cls}) –ø—Ä–æ–ø—É—â–µ–Ω`);
    }
  }

  if (filteredCanvases.length === 0) {
    console.warn(`‚ö†Ô∏è –ù–µ—Ç –∫–∞–Ω–≤–∞—Å–æ–≤ —Å –∫–ª–∞—Å—Å–æ–º "${canvasClass}"`);
    return {};
  }

  // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞ (–¥–ª—è –∞–≤—Ç–æ-–∑—É–º)
  const { width: vw, height: vh } = await page.evaluate(() => ({
    width: window.innerWidth,
    height: window.innerHeight,
  }));

  const result: Record<number, Record<number, Record<number, string>>> = {};

  // –ó–∞—â–∏—Ç–∞ –æ—Ç –∑–∞–≤–∏—Å–∞–Ω–∏—è
  async function withTimeout<T>(promise: Promise<T>, ms: number, msg: string): Promise<T> {
    return Promise.race([
      promise,
      new Promise<never>((_, reject) =>
        setTimeout(() => reject(new Error(`‚è∞ Timeout: ${msg}`)), ms)
      ),
    ]);
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π canvas
  for (const [index, canvas] of filteredCanvases.entries()) {
    console.log(`\nüß© Processing canvas #${index}`);

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –≤–∏–¥–∏–º
      const isVisible = await canvas.evaluate((el) => {
        const style = window.getComputedStyle(el);
        return (
          style.display !== 'none' &&
          style.visibility !== 'hidden' &&
          style.opacity !== '0'
        );
      });
      console.log(`üëÅÔ∏è Canvas #${index} visible: ${isVisible}`);
      if (!isVisible) continue;

      // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
      const box = await canvas.boundingBox();
      if (!box) {
        console.warn(`‚ö†Ô∏è Canvas #${index} –Ω–µ –∏–º–µ–µ—Ç boundingBox`);
        continue;
      }

      const { width, height } = box;
      console.log(`üìè Canvas #${index} size: ${width}x${height}`);

      // –ó—É–º-–∞—É—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      const zoomOut = Math.min(1, vw / width, vh / height);
      if (zoomOut < 1) {
        console.log(`üîç –ü—Ä–∏–º–µ–Ω—è–µ–º zoom-out ${zoomOut.toFixed(2)}`);
        await page.evaluate((scale) => {
          document.body.style.transformOrigin = '0 0';
          document.body.style.transform = `scale(${scale})`;
        }, zoomOut);
        await page.waitForTimeout(200);
      }

      // –°–∫—Ä–æ–ª–ª–∏–º –∫ —ç–ª–µ–º–µ–Ω—Ç—É
      await canvas.scrollIntoViewIfNeeded();
      console.log(`üìú Canvas #${index} –ø—Ä–æ–∫—Ä—É—á–µ–Ω –≤ –∑–æ–Ω—É –≤–∏–¥–∏–º–æ—Å—Ç–∏`);

      // –°–∫—Ä–∏–Ω—à–æ—Ç
      console.log(`üì∏ –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç canvas #${index}`);
      const buffer = await page.screenshot({
        clip: {
          x: box.x,
          y: box.y,
          width: box.width,
          height: box.height,
        },
      });
      console.log(`‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –≥–æ—Ç–æ–≤ (${buffer.byteLength} –±–∞–π—Ç)`);

      // OCR —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      console.log(`üß† –ó–∞–ø—É—Å–∫ OCR –¥–ª—è canvas #${index}`);
      const { data } = await withTimeout(
        Tesseract.recognize(buffer, 'eng', {
          logger: (info) =>
            console.log(`[Canvas ${index} OCR] ${info.status}: ${info.progress?.toFixed(2)}`),
        }),
        90000,
        `OCR for canvas #${index} took too long`
      );

      const words = data.words || [];
      console.log(`üî§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ —Å–ª–æ–≤: ${words.length}`);

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ª–æ–≤–∞—Ä—å —Å–ª–æ–≤–∞—Ä–µ–π
      const tableDict: Record<number, Record<number, string>> = {};
      let currentRow = 0;
      let currentY = null as number | null;

      for (const w of words) {
        if (!w.text?.trim()) continue;

        if (currentY === null) {
          currentY = w.bbox.y0;
        } else if (Math.abs(w.bbox.y0 - currentY) > 20) {
          currentRow++;
          currentY = w.bbox.y0;
        }

        if (!tableDict[currentRow]) tableDict[currentRow] = {};
        const colIndex = Object.keys(tableDict[currentRow]).length;
        tableDict[currentRow][colIndex] = w.text;
      }

      result[index] = tableDict;
      console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ #${index} —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ (${Object.keys(tableDict).length} —Å—Ç—Ä–æ–∫)`);

    } catch (err) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ canvas #${index}:`, err);
    }
  }

  console.log(`\nüèÅ –í—Å–µ –∫–∞–Ω–≤–∞—Å—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç.`);
  return result;
}
