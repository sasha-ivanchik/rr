import { Page } from "@playwright/test";

export async function extractCanvasText(page: Page): Promise<string[]> {
  console.log("üîç –ò—â–µ–º —Ç–µ–∫—Å—Ç—ã, –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ canvas...");

  // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º fillText –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  await page.addInitScript(() => {
    // –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–µ–∫—Å—Ç–æ–≤
    (window as any).__canvasTexts = [];

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
    const originalFillText = CanvasRenderingContext2D.prototype.fillText;

    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º fillText
    CanvasRenderingContext2D.prototype.fillText = function (
      text: string,
      x: number,
      y: number,
      maxWidth?: number
    ) {
      try {
        (window as any).__canvasTexts.push({
          text,
          x,
          y,
          maxWidth,
          time: Date.now(),
        });
      } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–µ—Ö–≤–∞—Ç–µ fillText:", e);
      }

      // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥, —á—Ç–æ–±—ã –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –Ω–µ –ª–æ–º–∞–ª–∞—Å—å
      return originalFillText.call(this, text, x, y, maxWidth);
    };
  });

  // –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞—é—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –∫–∞–Ω–≤–∞—Å–µ
  console.log("‚è≥ –ñ–¥—ë–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ canvas...");
  await page.waitForTimeout(3000);

  // –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç—ã
  const texts = await page.evaluate(() => {
    const arr = (window as any).__canvasTexts || [];
    return arr.map((t: any) => t.text);
  });

  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${texts.length} –Ω–∞–¥–ø–∏—Å–µ–π:`, texts.slice(0, 10));
  return texts;
}
