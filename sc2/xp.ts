import { Page } from '@playwright/test';

export interface TableStructure {
  [rowIndex: number]: { [colIndex: number]: string };
}

export interface AllTables {
  [tableIndex: number]: TableStructure;
}

export async function extractStructuredTablesFromCanvas(page: Page, canvasClass?: string): Promise<AllTables> {
  const result: AllTables = {};
  const selector = canvasClass ? `canvas.${canvasClass}` : 'canvas';
  console.log(`üîπ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–µ–ª–µ–∫—Ç–æ—Ä: "${selector}"`);

  const allCanvases = await page.$$(selector);
  console.log(`üîπ –ù–∞–π–¥–µ–Ω–æ ${allCanvases.length} –∫–∞–Ω–≤–∞—Å–æ–≤`);

  // üîπ –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∏–¥–∏–º—ã–µ
  const visibleCanvases = [];
  for (const [idx, canvas] of allCanvases.entries()) {
    const visible = await canvas.isVisible();
    const box = await canvas.boundingBox();
    if (visible && box) visibleCanvases.push({ canvas, index: idx, box });
  }

  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${visibleCanvases.length} –≤–∏–¥–∏–º—ã—Ö –∫–∞–Ω–≤–∞—Å–æ–≤`);
  if (visibleCanvases.length === 0) {
    console.warn('‚ö†Ô∏è –ù–µ—Ç –≤–∏–¥–∏–º—ã—Ö –∫–∞–Ω–≤–∞—Å–æ–≤ ‚Äî –≤—ã—Ö–æ–¥–∏–º');
    return result;
  }

  // üîπ –†–∞–±–æ—Ç–∞–µ–º —Å –∫–∞–∂–¥—ã–º –≤–∏–¥–∏–º—ã–º –∫–∞–Ω–≤–∞—Å–æ–º
  for (const { canvas, index: i } of visibleCanvases) {
    console.log(`\nüß© –û–±—Ä–∞–±–æ—Ç–∫–∞ canvas #${i}`);

    try {
      // üîπ –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º fillText –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      const texts: string[] = await page.evaluate(() => {
        const captured: string[] = [];
        const originalFillText = CanvasRenderingContext2D.prototype.fillText;
        CanvasRenderingContext2D.prototype.fillText = function (text: string, x: number, y: number, ...args: any[]) {
          captured.push(text);
          return originalFillText.apply(this, [text, x, y, ...args]);
        };
        return captured;
      });

      console.log(`üî† Canvas #${i} –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏–ª ${texts.length} —Ç–µ–∫—Å—Ç–æ–≤`);
      if (!texts.length) {
        console.warn('‚ö†Ô∏è –¢–µ–∫—Å—Ç –Ω–µ –±—ã–ª –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, WebGL.');
      }

      // üîπ –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      const table: TableStructure = {};
      texts.forEach((text, idx) => {
        table[idx] = { 0: text }; // –º–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º/—Å—Ç—Ä–æ–∫–∞–º
      });

      result[i] = table;
      console.log(`‚úÖ Canvas #${i} –≥–æ—Ç–æ–≤, —Ç–µ–∫—Å—Ç–∞: ${texts.length}`);
    } catch (err) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ canvas #${i}:`, err);
    }
  }

  console.log('üèÅ –í—Å–µ –∫–∞–Ω–≤–∞—Å—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã');
  return result;
}
