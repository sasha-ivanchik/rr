import { Page } from '@playwright/test';
import Tesseract from 'tesseract.js';
import fs from 'fs';

export interface TableStructure {
  [rowIndex: number]: { [colIndex: number]: string };
}

export interface AllTables {
  [tableIndex: number]: TableStructure;
}

export async function extractStructuredTablesFromCanvas(
  page: Page,
  canvasClass?: string
): Promise<AllTables> {
  const result: AllTables = {};
  const selector = canvasClass ? `canvas.${canvasClass}` : 'canvas';
  console.log(`üîπ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–µ–ª–µ–∫—Ç–æ—Ä: "${selector}"`);

  const allCanvases = await page.$$(selector);
  console.log(`üîπ –ù–∞–π–¥–µ–Ω–æ ${allCanvases.length} –∫–∞–Ω–≤–∞—Å–æ–≤`);

  // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∏–¥–∏–º—ã–µ
  const visibleCanvases = [];
  for (const [idx, canvas] of allCanvases.entries()) {
    const visible = await canvas.isVisible();
    const box = await canvas.boundingBox();
    if (visible && box) visibleCanvases.push({ canvas, index: idx, box });
  }

  if (visibleCanvases.length === 0) {
    console.warn('‚ö†Ô∏è –ù–µ—Ç –≤–∏–¥–∏–º—ã—Ö –∫–∞–Ω–≤–∞—Å–æ–≤ ‚Äî –≤—ã—Ö–æ–¥–∏–º');
    return result;
  }

  const { canvas, index: i, box } = visibleCanvases[0];
  console.log(`\nüß© Canvas #${i}, –∏—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${Math.round(box.width)}x${Math.round(box.height)}`);

  try {
    // üîπ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–∞–Ω–≤–∞—Å–∞ (—á—Ç–æ–±—ã OCR –ª—É—á—à–µ –≤–∏–¥–µ–ª)
    const scaleCanvas = 2;
    const newWidth = Math.round(box.width * scaleCanvas);
    const newHeight = Math.round(box.height * scaleCanvas);

    await page.evaluate(
      ({ sel, w, h }) => {
        const el = document.querySelector(sel) as HTMLCanvasElement;
        if (el) {
          (el as any).__originalSize = { width: el.width, height: el.height };
          el.width = w;
          el.height = h;
        }
      },
      { sel: selector, w: newWidth, h: newHeight }
    );
    console.log(`üß™ –ü—Ä–∏–º–µ–Ω—ë–Ω –º–∞—Å—à—Ç–∞–± –∫–∞–Ω–≤–∞—Å–∞ x${scaleCanvas} ‚Üí ${newWidth}x${newHeight}`);

    // üîπ Zoom In –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞)
    const zoomPage = 2; // –ø–æ–ø—Ä–æ–±—É–π —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ 2x
    await page.evaluate(({ scale }) => {
      document.body.style.transformOrigin = '0 0';
      document.body.style.transform = `scale(${scale})`;
    }, { scale: zoomPage });
    console.log(`üîç –ü—Ä–∏–º–µ–Ω—ë–Ω zoom —Å—Ç—Ä–∞–Ω–∏—Ü—ã x${zoomPage}`);

    await page.waitForTimeout(500); // –Ω–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏

    // üîπ –°–∫—Ä–∏–Ω—à–æ—Ç –∫–∞–Ω–≤–∞—Å–∞
    const screenshotPath = `./canvas_test_${Date.now()}.png`;
    console.log(`üì∏ –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç ‚Üí ${screenshotPath}`);
    const buffer = await canvas.screenshot();
    fs.writeFileSync(screenshotPath, buffer);

    // üîπ –°–±—Ä–æ—Å zoom —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await page.evaluate(() => {
      document.body.style.transform = '';
    });

    // üîπ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∫–∞–Ω–≤–∞—Å–∞
    await page.evaluate(({ sel }) => {
      const el = document.querySelector(sel) as HTMLCanvasElement;
      if (el && (el as any).__originalSize) {
        el.width = (el as any).__originalSize.width;
        el.height = (el as any).__originalSize.height;
      }
    }, { sel: selector });

    // üîπ OCR
    console.log(`üß† OCR —á–µ—Ä–µ–∑ Tesseract...`);
    const { data } = await Tesseract.recognize(screenshotPath, 'eng', {
      langPath: './tessdata',
      logger: (info) => {
        if (info.status)
          console.log(`[OCR] ${info.status}: ${(info.progress * 100).toFixed(1)}%`);
      },
    });

    const words = (data.words ?? []).filter((w) => w.text?.trim());
    console.log(`üî† OCR –Ω–∞—à—ë–ª ${words.length} —Å–ª–æ–≤`);

    if (!words.length) console.warn('‚ö†Ô∏è –¢–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω');
    else console.log('üßæ –ü—Ä–∏–º–µ—Ä —Å–ª–æ–≤:', words.slice(0, 10).map((w) => w.text));

    return result;
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ canvas #${i}:`, err);
    return result;
  }
}
