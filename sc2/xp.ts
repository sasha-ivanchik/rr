import { Page } from '@playwright/test';
import Tesseract from 'tesseract.js';
import fs from 'fs';

export interface TableStructure {
  [rowIndex: number]: { [colIndex: number]: string };
}

export interface AllTables {
  [tableIndex: number]: TableStructure;
}

export async function extractStructuredTablesFromCanvas(
  page: Page,
  canvasClass?: string
): Promise<AllTables> {
  const result: AllTables = {};
  const selector = canvasClass ? `canvas.${canvasClass}` : 'canvas';
  console.log(`üîπ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–µ–ª–µ–∫—Ç–æ—Ä: "${selector}"`);

  const allCanvases = await page.$$(selector);
  console.log(`üîπ –ù–∞–π–¥–µ–Ω–æ ${allCanvases.length} –∫–∞–Ω–≤–∞—Å–æ–≤`);

  // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∏–¥–∏–º—ã–µ
  const visibleCanvases = [];
  for (const [idx, canvas] of allCanvases.entries()) {
    const box = await canvas.boundingBox();
    if (!box) continue;
    const visible = await canvas.isVisible();
    if (visible) {
      visibleCanvases.push({ canvas, index: idx, box });
    }
  }

  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${visibleCanvases.length} –≤–∏–¥–∏–º—ã—Ö –∫–∞–Ω–≤–∞—Å–æ–≤`);
  if (visibleCanvases.length === 0) {
    console.warn('‚ö†Ô∏è –ù–µ—Ç –≤–∏–¥–∏–º—ã—Ö –∫–∞–Ω–≤–∞—Å–æ–≤ ‚Äî –≤—ã—Ö–æ–¥–∏–º');
    return result;
  }

  // –†–∞–±–æ—Ç–∞–µ–º —Å –ø–µ—Ä–≤—ã–º –≤–∏–¥–∏–º—ã–º –∫–∞–Ω–≤–∞—Å–æ–º (—Ç–µ—Å—Ç–æ–≤—ã–π)
  const { canvas, index: i, box } = visibleCanvases[0];
  console.log(`\nüß© –¢–µ—Å—Ç: canvas #${i}, —Ä–∞–∑–º–µ—Ä: ${Math.round(box.width)}x${Math.round(box.height)}`);

  try {
    // üîπ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä
    const testWidth = Math.min(1200, Math.round(box.width * 1.5));
    const testHeight = Math.min(900, Math.round(box.height * 1.5));

    await page.evaluate(({ sel, w, h }) => {
      const el = document.querySelector(sel) as HTMLCanvasElement;
      if (el) {
        (el as any).__originalStyle = el.getAttribute('style') || '';
        el.style.width = `${w}px`;
        el.style.height = `${h}px`;
      }
    }, { sel: selector, w: testWidth, h: testHeight });
    console.log(`üß™ –ü—Ä–∏–º–µ–Ω—ë–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: ${testWidth}x${testHeight}`);

    // üîπ Zoom In
    const zoom = 2.0;
    await page.evaluate(({ scale }) => {
      document.body.style.transformOrigin = '0 0';
      document.body.style.transform = `scale(${scale})`;
    }, { scale: zoom });
    console.log(`üîç –ü—Ä–∏–º–µ–Ω—ë–Ω –∑—É–º: ${zoom}`);

    await page.waitForTimeout(500);

    // üîπ –°–∫—Ä–∏–Ω—à–æ—Ç
    const screenshotPath = `./canvas_test_${Date.now()}.png`;
    console.log(`üì∏ –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç ‚Üí ${screenshotPath}`);

    const buffer = await canvas.screenshot();
    fs.writeFileSync(screenshotPath, buffer);

    // üîπ –°–±—Ä–æ—Å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
    await page.evaluate(() => {
      document.body.style.transform = '';
    });

    // üîπ –í–æ–∑–≤—Ä–∞—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∏–ª—è
    await page.evaluate(({ sel }) => {
      const el = document.querySelector(sel) as HTMLCanvasElement;
      if (el && (el as any).__originalStyle !== undefined) {
        el.setAttribute('style', (el as any).__originalStyle);
      }
    }, { sel: selector });

    // üîπ OCR
    console.log(`üß† OCR —á–µ—Ä–µ–∑ Tesseract...`);
    const { data } = await Tesseract.recognize(buffer, 'eng', {
      langPath: './tessdata',
      logger: (info) => {
        if (info.status) console.log(`[OCR] ${info.status}: ${(info.progress * 100).toFixed(1)}%`);
      },
    });

    const words = (data.words ?? []).filter((w) => w.text?.trim());
    console.log(`üî† OCR –Ω–∞—à—ë–ª ${words.length} —Å–ª–æ–≤`);

    if (!words.length) {
      console.warn('‚ö†Ô∏è –¢–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω');
    } else {
      console.log('üßæ –ü—Ä–∏–º–µ—Ä —Å–ª–æ–≤:', words.slice(0, 10).map((w) => w.text));
    }

    console.log('üèÅ –ì–æ—Ç–æ–≤–æ');
    return result;
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ canvas #${i}:`, err);
    return result;
  }
}
