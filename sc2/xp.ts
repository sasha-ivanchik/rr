export async function extractStructuredTablesFromCanvas(
  page: Page,
  zoomScale = 2 // –≤–æ —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —É–≤–µ–ª–∏—á–∏—Ç—å
): Promise<AllTables> {
  const result: AllTables = {};

  try {
    console.log(`üîç –ü—Ä–∏–º–µ–Ω—è–µ–º zoom-in —á–µ—Ä–µ–∑ CSS transform x${zoomScale}...`);
    await page.evaluate((scale) => {
      document.body.style.transformOrigin = '0 0';
      document.body.style.transform = `scale(${scale})`;
    }, zoomScale);

    await page.waitForTimeout(300); // –∂–¥—ë–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏

    console.log('üì∏ –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
    const screenshotPath = path.resolve(process.cwd(), 'page_screenshot.png');
    const buffer = await page.screenshot({ path: screenshotPath, fullPage: true });
    console.log(`‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${screenshotPath}, —Ä–∞–∑–º–µ—Ä: ${buffer.length} –±–∞–π—Ç`);

    // —Å–±—Ä–æ—Å transform
    await page.evaluate(() => {
      document.body.style.transform = '';
    });

    console.log('üß† –ó–∞–ø—É—Å–∫ OCR...');
    const { data } = await Tesseract.recognize(buffer, 'eng', {
      langPath: path.resolve(process.cwd(), 'tessdata'),
      gzip: false,
      logger: (info) => console.log(`[OCR] ${info.status}: ${info.progress?.toFixed(2)}`),
    });

    const words = (data.words ?? []).filter((w) => w.text?.trim());
    console.log(`üî† OCR —Ä–∞—Å–ø–æ–∑–Ω–∞–ª ${words.length} —Å–ª–æ–≤`);

    if (!words.length) return result;

    const rows = groupWordsByRows(words);
    const table: TableStructure = {};

    rows.forEach((rowWords, rowIndex) => {
      const rowData: Record<number, string> = {};
      rowWords.forEach((w, colIndex) => (rowData[colIndex] = w.text.trim()));
      table[rowIndex] = rowData;
    });

    result[0] = table;
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ extractStructuredTablesFromCanvas:', err);
  }

  return result;
}
