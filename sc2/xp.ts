import { Page } from '@playwright/test';
import Tesseract from 'tesseract.js';
import path from 'path';

export interface TableStructure {
  [rowIndex: number]: { [colIndex: number]: string };
}

export interface AllTables {
  [tableIndex: number]: TableStructure;
}

/** –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å–ª–æ–≤ –ø–æ —Å—Ç—Ä–æ–∫–∞–º */
function groupWordsByRows(
  words: { text: string; bbox: { x0: number; y0: number; x1: number; y1: number } }[],
  yTolerance = 15
) {
  console.log(`üìä –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ ${words.length} —Å–ª–æ–≤ –ø–æ —Å—Ç—Ä–æ–∫–∞–º...`);
  const rows: Record<number, typeof words> = {};

  for (const word of words.sort((a, b) => a.bbox.y0 - b.bbox.y0)) {
    const y = word.bbox.y0;
    const existingRow = Object.keys(rows).find((k) => Math.abs(Number(k) - y) < yTolerance);
    if (existingRow) rows[existingRow].push(word);
    else rows[y] = [word];
  }

  const grouped = Object.values(rows).map((r) => r.sort((a, b) => a.bbox.x0 - b.bbox.x0));
  console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${grouped.length} —Å—Ç—Ä–æ–∫ –ø–æ—Å–ª–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏`);
  return grouped;
}

/** –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è */
export async function extractStructuredTablesFromCanvas(
  page: Page,
  canvasSelector: string
): Promise<AllTables> {
  const result: AllTables = {};

  console.log(`üîπ –ü–æ–∏—Å–∫ canvas: "${canvasSelector}"`);
  const canvas = await page.$(canvasSelector);
  if (!canvas) {
    console.error('‚ùå Canvas –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return result;
  }

  // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã canvas –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ JS
  const contentBox = await page.evaluate((sel) => {
    const c = document.querySelector(sel) as HTMLCanvasElement;
    if (!c) return null;
    return { width: c.width, height: c.height };
  }, canvasSelector);

  if (!contentBox) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã canvas');
    return result;
  }

  if (contentBox.width < 10 || contentBox.height < 10) {
    console.warn('‚ö†Ô∏è Canvas —Å–ª–∏—à–∫–æ–º –º–∞–ª –¥–ª—è OCR, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
    return result;
  }

  console.log(`üìè Canvas size: width=${contentBox.width}, height=${contentBox.height}`);

  console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –≤—Å–µ–≥–æ canvas...');
  const buffer = await canvas.screenshot();

  console.log('üß† –ó–∞–ø—É—Å–∫ OCR —á–µ—Ä–µ–∑ Tesseract.js (–ª–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å)...');
  const { data } = await Tesseract.recognize(buffer, 'eng', {
    langPath: path.resolve(process.cwd(), 'tessdata'), // –ø–∞–ø–∫–∞ —Å eng.traineddata
    logger: (info) => console.log(`[OCR] ${info.status}: ${info.progress?.toFixed(2)}`),
  });

  const words = (data.words ?? []).filter((w) => w.text?.trim());
  console.log(`üî† OCR —Ä–∞—Å–ø–æ–∑–Ω–∞–ª ${words.length} —Å–ª–æ–≤`);

  if (!words.length) return result;

  const rows = groupWordsByRows(words);

  const table: TableStructure = {};
  rows.forEach((rowWords, rowIndex) => {
    const rowData: Record<number, string> = {};
    rowWords.forEach((w, colIndex) => (rowData[colIndex] = w.text.trim()));
    table[rowIndex] = rowData;
  });

  result[0] = table;
  console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

  return result;
}
