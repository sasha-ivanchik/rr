import { Page } from '@playwright/test';
import Tesseract from 'tesseract.js';
import fs from 'fs';
import path from 'path';

export async function extractWordsFromCanvases(page: Page) {
  console.log('üü¢ [Debug] –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞–Ω–≤–∞—Å–æ–≤ –≤ .—Ç—Å—Ç');

  // 1Ô∏è‚É£ –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–∞–Ω–≤–∞—Å—ã –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
  const canvasCount = await page.evaluate(() => {
    const container = document.querySelector('.—Ç—Å—Ç');
    if (!container) return 0;
    return container.querySelectorAll('canvas').length;
  });

  if (!canvasCount) throw new Error('‚ùå [Debug] –ö–∞–Ω–≤–∞—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ');

  console.log(`üü¢ [Debug] –ù–∞–π–¥–µ–Ω–æ ${canvasCount} –∫–∞–Ω–≤–∞—Å–æ–≤`);

  // 2Ô∏è‚É£ –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–∞–Ω–≤–∞—Å—ã –≤ –æ–¥–∏–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π canvas –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º
  const dataUrl = await page.evaluate(() => {
    const container = document.querySelector('.—Ç—Å—Ç')!;
    const canvases = Array.from(container.querySelectorAll('canvas')).filter(c => c.offsetWidth > 0 && c.offsetHeight > 0);

    if (!canvases.length) return '';

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏—Ç–æ–≥–æ–≤–æ–≥–æ canvas (–ø–æ –º–∞–∫—Å–∏–º—É–º—É –∫–∞–Ω–≤–∞—Å–æ–≤)
    const width = Math.max(...canvases.map(c => c.offsetLeft + c.width));
    const height = Math.max(...canvases.map(c => c.offsetTop + c.height));

    const scale = 2; // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è OCR
    const temp = document.createElement('canvas');
    temp.width = width * scale;
    temp.height = height * scale;
    const ctx = temp.getContext('2d')!;

    // –ö–æ–ø–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–∞–Ω–≤–∞—Å
    canvases.forEach((c, idx) => {
      const offsetX = c.offsetLeft * scale;
      const offsetY = c.offsetTop * scale;
      ctx.drawImage(c, 0, 0, c.width, c.height, offsetX, offsetY, c.width * scale, c.height * scale);
      console.log(`üü° [Debug] Canvas ${idx}: ${c.width}x${c.height} -> ${c.width*scale}x${c.height*scale}`);
    });

    // –ü–æ–≤—ã—à–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç
    const imgData = ctx.getImageData(0, 0, temp.width, temp.height);
    const data = imgData.data;
    for (let i = 0; i < data.length; i += 4) {
      for (let c = 0; c < 3; c++) {
        let val = data[i + c];
        val = ((val - 128) * 1.5 + 128); // –∫–æ–Ω—Ç—Ä–∞—Å—Ç 1.5
        data[i + c] = Math.min(255, Math.max(0, val));
      }
    }
    ctx.putImageData(imgData, 0, 0);
    console.log('üü¢ [Debug] –ö–æ–Ω—Ç—Ä–∞—Å—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω');

    return temp.toDataURL('image/png');
  });

  if (!dataUrl) throw new Error('‚ùå [Debug] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏—Ç–æ–≥–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è OCR');

  // 3Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –¥–µ–±–∞–≥–∞
  const buffer = Buffer.from(dataUrl.split(',')[1], 'base64');
  const screenshotPath = path.join(process.cwd(), 'canvases_debug.png');
  fs.writeFileSync(screenshotPath, buffer);
  console.log('üíæ [Debug] –ò—Ç–æ–≥–æ–≤—ã–π canvas —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤:', screenshotPath);

  // 4Ô∏è‚É£ OCR —á–µ—Ä–µ–∑ Tesseract
  console.log('üîç [Debug] –ó–∞–ø—É—Å–∫–∞–µ–º OCR —á–µ—Ä–µ–∑ Tesseract...');
  const result = await Tesseract.recognize(buffer, 'eng', {
    tessedit_char_whitelist: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,:- '
  });

  const words = result.data.words.map(w => ({
    text: w.text,
    conf: w.confidence,
    bbox: w.bbox
  }));

  console.log('üü¢ [Debug] OCR –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤:', words.length);
  console.log('–ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤—ã—Ö 5 —Å–ª–æ–≤:', words.slice(0, 5));

  return words;
}
