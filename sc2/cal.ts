import { Page, Locator } from '@playwright/test';
import Tesseract from 'tesseract.js';
import fs from 'fs';
import path from 'path';

export async function extractNumbersFromCanvas(page: Page, containerLocator: Locator) {
  console.log('üü¢ [Debug] –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞–Ω–≤–∞—Å–∞ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ...');
  await containerLocator.locator('canvas').first().waitFor({ state: 'visible', timeout: 10000 });

  const canvasHandle = await containerLocator.locator('canvas').first();
  if (!canvasHandle) throw new Error('‚ùå [Debug] –ö–∞–Ω–≤–∞—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');

  console.log('üü¢ [Debug] –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–≤–æ–≥–æ –∫–∞–Ω–≤–∞—Å–∞...');
  const screenshotBuffer = await canvasHandle.screenshot();
  console.log('üü¢ [Debug] –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω, —Ä–∞–∑–º–µ—Ä (–±–∞–π—Ç):', screenshotBuffer.length);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
  const screenshotPath = path.join(process.cwd(), 'canvas_debug.png');
  fs.writeFileSync(screenshotPath, screenshotBuffer);
  console.log('üíæ [Debug] –°–∫—Ä–∏–Ω—à–æ—Ç –∫–∞–Ω–≤–∞—Å–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω:', screenshotPath);

  const screenshotBase64 = screenshotBuffer.toString('base64');

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—É–≤–µ–ª–∏—á–µ–Ω–∏–µ, –∫–æ–Ω—Ç—Ä–∞—Å—Ç, –∞–≤—Ç–æ–∏–Ω–≤–µ—Ä—Å–∏—è)
  console.log('üü¢ [Debug] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (resize 500x600 + –∫–æ–Ω—Ç—Ä–∞—Å—Ç + –∞–≤—Ç–æ–∏–Ω–≤–µ—Ä—Å–∏—è)...');

  const dataUrl = await page.evaluate((base64: string) => {
    return new Promise<string>((resolve) => {
      const img = new Image();
      img.onload = () => {
        const targetWidth = 500;
        const targetHeight = 600;

        const temp = document.createElement('canvas');
        temp.width = targetWidth;
        temp.height = targetHeight;
        const ctx = temp.getContext('2d');
        if (!ctx) return resolve('');

        // –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–µ—Å–∞–π–∑–æ–º
        ctx.drawImage(img, 0, 0, targetWidth, targetHeight);

        const imageData = ctx.getImageData(0, 0, targetWidth, targetHeight);
        const data = imageData.data;

        // –£—Å–∏–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç
        const contrast = 1.6;
        const factor = (259 * (contrast + 255)) / (255 * (259 - contrast));

        let avgLuminance = 0;
        for (let i = 0; i < data.length; i += 4) {
          const r = data[i];
          const g = data[i + 1];
          const b = data[i + 2];
          const lum = 0.2126 * r + 0.7152 * g + 0.0722 * b;
          avgLuminance += lum;
          data[i] = factor * (r - 128) + 128;
          data[i + 1] = factor * (g - 128) + 128;
          data[i + 2] = factor * (b - 128) + 128;
        }
        avgLuminance /= (data.length / 4);

        // –ï—Å–ª–∏ —Ñ–æ–Ω —Ç—ë–º–Ω—ã–π ‚Äî –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
        if (avgLuminance < 128) {
          console.log('[OCR] ‚Üí –ê–≤—Ç–æ–∏–Ω–≤–µ—Ä—Å–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ (—Ç—ë–º–Ω—ã–π —Ñ–æ–Ω)');
          for (let i = 0; i < data.length; i += 4) {
            data[i] = 255 - data[i];
            data[i + 1] = 255 - data[i + 1];
            data[i + 2] = 255 - data[i + 2];
          }
        }

        ctx.putImageData(imageData, 0, 0);
        resolve(temp.toDataURL('image/png'));
      };
      img.onerror = (err) => {
        console.error('‚ùå [Debug] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', err);
        resolve('');
      };
      img.src = 'data:image/png;base64,' + base64;
    });
  }, screenshotBase64);

  if (!dataUrl) throw new Error('‚ùå [Debug] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è OCR');

  const processedPath = path.join(process.cwd(), 'canvas_debug_processed.png');
  fs.writeFileSync(processedPath, Buffer.from(dataUrl.split(',')[1], 'base64'));
  console.log('üíæ [Debug] –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:', processedPath);

  console.log('üîç [Debug] –ó–∞–ø—É—Å–∫–∞–µ–º Tesseract OCR...');
  const result = await Tesseract.recognize(dataUrl, 'eng', {
    tessedit_char_whitelist: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz.,:-',
    tessedit_pageseg_mode: 6, // –æ–¥–∏–Ω –±–ª–æ–∫ —Ç–µ–∫—Å—Ç–∞
  });

  const text = result?.data?.text?.trim() ?? '';
  console.log('üü¢ [Debug] OCR –∑–∞–≤–µ—Ä—à–µ–Ω. –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:', text);
  console.log('üìä [Debug] –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:', result?.data?.confidence ?? 'n/a');

  const words = text.split(/\s+/).filter(Boolean);
  console.log('üü¢ [Debug] –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤/—á–∏—Å–µ–ª:', words.length);
  console.log('üîπ –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤—ã—Ö 10:', words.slice(0, 10));

  return words;
}
