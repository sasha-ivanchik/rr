import { Page, Locator } from '@playwright/test';
import Tesseract from 'tesseract.js';
import fs from 'fs';
import path from 'path';

export async function extractNumbersFromCanvas(page: Page, containerLocator: Locator) {
  console.log('üü¢ [Debug] –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞–Ω–≤–∞—Å–∞ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ...');
  
  await containerLocator.locator('canvas').first().waitFor({ state: 'visible', timeout: 10000 });

  const canvasHandle = await containerLocator.locator('canvas').first();
  if (!canvasHandle) throw new Error('‚ùå [Debug] –ö–∞–Ω–≤–∞—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');

  console.log('üü¢ [Debug] –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–≤–æ–≥–æ –∫–∞–Ω–≤–∞—Å–∞...');
  const screenshotBuffer = await canvasHandle.screenshot();
  console.log('üü¢ [Debug] –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω, —Ä–∞–∑–º–µ—Ä (–±–∞–π—Ç):', screenshotBuffer.length);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –¥–µ–±–∞–≥–∞
  const screenshotPath = path.join(process.cwd(), 'canvas_debug.png');
  fs.writeFileSync(screenshotPath, screenshotBuffer);
  console.log('üíæ [Debug] –°–∫—Ä–∏–Ω—à–æ—Ç –∫–∞–Ω–≤–∞—Å–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω:', screenshotPath);

  const screenshotBase64 = screenshotBuffer.toString('base64');

  // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏ –¥–µ–ª–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ canvas
  const dataUrl = await page.evaluate((base64: string) => {
    return new Promise<string>((resolve) => {
      const img = new Image();
      img.onload = () => {
        const scale = 4; // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –º–µ–ª–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        const temp = document.createElement('canvas');
        temp.width = img.width * scale;
        temp.height = img.height * scale;
        const ctx = temp.getContext('2d')!;
        ctx.drawImage(img, 0, 0, temp.width, temp.height);

        const imgData = ctx.getImageData(0, 0, temp.width, temp.height);
        const data = imgData.data;

        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è: —Å–≤–µ—Ç–ª—ã–µ –ø–∏–∫—Å–µ–ª–∏ -> –±–µ–ª—ã–µ, —Ç–µ–º–Ω—ã–µ -> —á–µ—Ä–Ω—ã–µ
        for (let i = 0; i < data.length; i += 4) {
          const brightness = 0.299 * data[i] + 0.587 * data[i + 1] + 0.114 * data[i + 2];
          const val = brightness > 50 ? 255 : 0;
          data[i] = data[i + 1] = data[i + 2] = val;
          data[i + 3] = 255; // –∞–ª—å—Ñ–∞
        }
        ctx.putImageData(imgData, 0, 0);

        resolve(temp.toDataURL('image/png'));
      };
      img.onerror = (err) => {
        console.error('‚ùå [Debug] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ canvas', err);
        resolve('');
      };
      img.src = 'data:image/png;base64,' + base64;
    });
  }, screenshotBase64);

  if (!dataUrl) throw new Error('‚ùå [Debug] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è OCR');

  console.log('üîç [Debug] –ó–∞–ø—É—Å–∫–∞–µ–º Tesseract OCR...');
  const result = await Tesseract.recognize(dataUrl, 'eng', {
    tessedit_char_whitelist: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz.,:-',
    tessedit_pageseg_mode: 6 // –æ–¥–∏–Ω –±–ª–æ–∫ —Ç–µ–∫—Å—Ç–∞
  });

  console.log('üü¢ [Debug] OCR –∑–∞–≤–µ—Ä—à–µ–Ω. –°–æ–¥–µ—Ä–∂–∏–º–æ–µ result.data.text:', result?.data?.text);

  let words: string[] = [];
  if (result?.data?.text) {
    words = result.data.text
      .split(/\s+/)
      .filter(Boolean);
  } else {
    console.log('‚ö†Ô∏è [Debug] OCR –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç');
  }

  console.log('üü¢ [Debug] –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤/—á–∏—Å–µ–ª:', words.length);
  console.log('–ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤—ã—Ö 10 —Å–ª–æ–≤/—á–∏—Å–µ–ª:', words.slice(0, 10));

  return words;
}

const dataUrl = await page.evaluate((base64: string) => {
  return new Promise<string>((resolve) => {
    const img = new Image();
    img.onload = () => {
      const scale = 4;
      const temp = document.createElement('canvas');
      temp.width = img.width * scale;
      temp.height = img.height * scale;
      const ctx = temp.getContext('2d')!;
      ctx.drawImage(img, 0, 0, temp.width, temp.height);

      const imgData = ctx.getImageData(0, 0, temp.width, temp.height);
      const data = imgData.data;

      // 1Ô∏è‚É£ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é —è—Ä–∫–æ—Å—Ç—å ‚Äî —Ç—ë–º–Ω—ã–π –∏–ª–∏ —Å–≤–µ—Ç–ª—ã–π —Ñ–æ–Ω
      let sum = 0;
      for (let i = 0; i < data.length; i += 4) {
        const b = 0.299 * data[i] + 0.587 * data[i + 1] + 0.114 * data[i + 2];
        sum += b;
      }
      const avg = sum / (data.length / 4);
      const invert = avg < 128; // –µ—Å–ª–∏ —Ñ–æ–Ω —Ç—ë–º–Ω—ã–π ‚Üí –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º

      // 2Ô∏è‚É£ –ö–æ–Ω—Ç—Ä–∞—Å—Ç + –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è + –∏–Ω–≤–µ—Ä—Å–∏—è
      for (let i = 0; i < data.length; i += 4) {
        let brightness = 0.299 * data[i] + 0.587 * data[i + 1] + 0.114 * data[i + 2];
        if (invert) brightness = 255 - brightness;
        const val = brightness > 128 ? 255 : 0;
        data[i] = data[i + 1] = data[i + 2] = val;
        data[i + 3] = 255;
      }

      ctx.putImageData(imgData, 0, 0);
      resolve(temp.toDataURL('image/png'));
    };
    img.onerror = (err) => {
      console.error('‚ùå [Debug] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', err);
      resolve('');
    };
    img.src = 'data:image/png;base64,' + base64;
  });
}, screenshotBase64);


fs.writeFileSync('canvas_debug_processed.png', Buffer.from(dataUrl.split(',')[1], 'base64'));
