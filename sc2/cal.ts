import { Page, Locator } from '@playwright/test';
import Tesseract from 'tesseract.js';
import fs from 'fs';
import path from 'path';

export async function extractWordsFromFirstCanvas(page: Page, containerLocator: Locator) {
  console.log('üü¢ [Debug] –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞–Ω–≤–∞—Å–∞ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ...');
  
  await containerLocator.locator('canvas').first().waitFor({ state: 'visible', timeout: 10000 });

  const canvasHandle = await containerLocator.locator('canvas').first();
  if (!canvasHandle) throw new Error('‚ùå [Debug] –ö–∞–Ω–≤–∞—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');

  console.log('üü¢ [Debug] –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–≤–æ–≥–æ –∫–∞–Ω–≤–∞—Å–∞...');
  const screenshotBuffer = await canvasHandle.screenshot();
  console.log('üü¢ [Debug] –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω, —Ä–∞–∑–º–µ—Ä (–±–∞–π—Ç):', screenshotBuffer.length);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –¥–µ–±–∞–≥–∞
  const screenshotPath = path.join(process.cwd(), 'first_canvas_debug.png');
  fs.writeFileSync(screenshotPath, screenshotBuffer);
  console.log('üíæ [Debug] –°–∫—Ä–∏–Ω—à–æ—Ç –∫–∞–Ω–≤–∞—Å–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω:', screenshotPath);

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º buffer –≤ base64 —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ page.evaluate
  const screenshotBase64 = screenshotBuffer.toString('base64');

  // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏ –ø–æ–≤—ã—à–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç —á–µ—Ä–µ–∑ canvas –≤ –±—Ä–∞—É–∑–µ—Ä–µ
  const dataUrl = await page.evaluate((base64: string) => {
    return new Promise<string>((resolve) => {
      const img = new Image();
      img.onload = () => {
        const scale = 2;
        const temp = document.createElement('canvas');
        temp.width = img.width * scale;
        temp.height = img.height * scale;
        const ctx = temp.getContext('2d')!;
        ctx.drawImage(img, 0, 0, temp.width, temp.height);

        // –ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
        const imgData = ctx.getImageData(0, 0, temp.width, temp.height);
        const data = imgData.data;
        for (let i = 0; i < data.length; i += 4) {
          for (let c = 0; c < 3; c++) {
            let val = data[i + c];
            val = ((val - 128) * 1.5 + 128); // –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ 1.5
            data[i + c] = Math.min(255, Math.max(0, val));
          }
        }
        ctx.putImageData(imgData, 0, 0);

        resolve(temp.toDataURL('image/png'));
      };
      img.onerror = (err) => {
        console.error('‚ùå [Debug] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ canvas', err);
        resolve('');
      };
      img.src = 'data:image/png;base64,' + base64;
    });
  }, screenshotBase64);

  if (!dataUrl) throw new Error('‚ùå [Debug] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è OCR');

  console.log('üîç [Debug] –ü–µ—Ä–µ–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Tesseract...');
  const result = await Tesseract.recognize(dataUrl, 'eng', {
    tessedit_char_whitelist: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,:- '
  });

  const words = result.data.words.map(w => ({
    text: w.text,
    conf: w.confidence,
    bbox: w.bbox
  }));

  console.log('üü¢ [Debug] OCR –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤:', words.length);
  console.log('–ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤—ã—Ö 5 —Å–ª–æ–≤:', words.slice(0, 5));

  return words;
}
