import { Page } from '@playwright/test';
import Tesseract from 'tesseract.js';

export async function extractWordsFromContainer(page: Page, containerSelector: string) {
  // 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π DataURL —Å –∫–æ–Ω—Ç—Ä–∞—Å—Ç–æ–º
  const dataUrl = await page.evaluate((selector) => {
    const container = document.querySelector(selector) as HTMLElement;
    if (!container) throw new Error('Container not found');

    const width = container.scrollWidth;
    const height = container.scrollHeight;

    const temp = document.createElement('canvas');
    temp.width = width;
    temp.height = height;
    const ctx = temp.getContext('2d');
    if (!ctx) throw new Error('Cannot get 2D context');

    const containerRect = container.getBoundingClientRect();

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –≤–∏–¥–∏–º—ã–µ –∫–∞–Ω–≤–∞—Å—ã
    container.querySelectorAll('canvas').forEach(canvas => {
      const style = getComputedStyle(canvas);
      if (style.display === 'none' || style.visibility === 'hidden') return;

      const rect = canvas.getBoundingClientRect();
      const offsetX = rect.left - containerRect.left;
      const offsetY = rect.top - containerRect.top;

      ctx.drawImage(canvas, offsetX, offsetY, rect.width, rect.height);
    });

    // 2Ô∏è‚É£ –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä—É—á–Ω–æ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏
    const imgData = ctx.getImageData(0, 0, temp.width, temp.height);
    const data = imgData.data;
    for (let i = 0; i < data.length; i += 4) {
      // –ø—Ä–æ—Å—Ç–æ–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç: —É—Å–∏–ª–µ–Ω–∏–µ –ø–æ —è—Ä–∫–æ—Å—Ç–∏
      for (let c = 0; c < 3; c++) { // R,G,B
        let val = data[i + c];
        val = ((val - 128) * 1.5 + 128); // –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ 1.5
        data[i + c] = Math.min(255, Math.max(0, val));
      }
    }
    ctx.putImageData(imgData, 0, 0);

    return temp.toDataURL('image/png');
  }, containerSelector);

  // 3Ô∏è‚É£ OCR —Å Tesseract.js
  console.log('üîç [OCR] –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç...');
  const result = await Tesseract.recognize(dataUrl, 'eng', {
    tessedit_char_whitelist: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,:- '
  });

  // 4Ô∏è‚É£ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–ª—è –¥–µ–±–∞–≥–∞
  const words = result.data.words.map(w => ({
    text: w.text,
    conf: w.confidence,
    bbox: w.bbox
  }));

  console.log(`üß† [OCR] –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤: ${words.length}`);
  console.log('–ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤—ã—Ö —Å–ª–æ–≤:', words.slice(0, 5));

  return words;
}
