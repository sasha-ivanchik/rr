import { Page } from '@playwright/test';
import Tesseract from 'tesseract.js';

export async function extractWordsFromContainer(page: Page) {
  // 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π DataURL —Å –∫–æ–Ω—Ç—Ä–∞—Å—Ç–æ–º
  const dataUrl = await page.evaluate(() => {
    console.log('üü¢ [Debug] –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ .—Ç—Å—Ç');
    const container = document.querySelector('.—Ç—Å—Ç') as HTMLElement;
    if (!container) throw new Error('Container not found');

    // –†–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–≤–∫–ª—é—á–∞—è –∫–æ–Ω—Ç–µ–Ω—Ç –≤–Ω–µ –≤—å—é–ø–æ—Ä—Ç–∞)
    const width = container.scrollWidth || container.offsetWidth;
    const height = container.scrollHeight || container.offsetHeight;
    console.log('üü¢ [Debug] –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:', width, height);

    if (width === 0 || height === 0) throw new Error('Container has zero size');

    const temp = document.createElement('canvas');
    temp.width = width;
    temp.height = height;
    const ctx = temp.getContext('2d');
    if (!ctx) throw new Error('Cannot get 2D context');

    let canvasCount = 0;

    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∫–∞–Ω–≤–∞—Å–∞–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
    container.querySelectorAll('canvas').forEach((canvas, idx) => {
      const style = getComputedStyle(canvas);
      if (style.display === 'none' || style.visibility === 'hidden') {
        console.log(`‚ö™ [Debug] Canvas ${idx} —Å–∫—Ä—ã—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        return;
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∫–∞–Ω–≤–∞—Å–∞
      if (canvas.width === 0 || canvas.height === 0) {
        console.log(`‚ö™ [Debug] Canvas ${idx} –∏–º–µ–µ—Ç –Ω—É–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        return;
      }

      const offsetX = canvas.offsetLeft;
      const offsetY = canvas.offsetTop;
      console.log(`üü° [Debug] Canvas ${idx}: size=${canvas.width}x${canvas.height}, offset=(${offsetX},${offsetY})`);

      ctx.drawImage(canvas, offsetX, offsetY, canvas.width, canvas.height);
      canvasCount++;
    });

    console.log('üü¢ [Debug] –í—Å–µ–≥–æ –∫–∞–Ω–≤–∞—Å–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:', canvasCount);

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä—É—á–Ω–æ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏
    const imgData = ctx.getImageData(0, 0, temp.width, temp.height);
    const data = imgData.data;
    for (let i = 0; i < data.length; i += 4) {
      for (let c = 0; c < 3; c++) {
        let val = data[i + c];
        val = ((val - 128) * 1.5 + 128); // –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ 1.5
        data[i + c] = Math.min(255, Math.max(0, val));
      }
    }
    ctx.putImageData(imgData, 0, 0);
    console.log('üü¢ [Debug] –ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∞');

    return temp.toDataURL('image/png');
  });

  console.log('üîç [Debug] –ü–µ—Ä–µ–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Tesseract...');
  const result = await Tesseract.recognize(dataUrl, 'eng', {
    tessedit_char_whitelist: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,:- '
  });

  const words = result.data.words.map(w => ({
    text: w.text,
    conf: w.confidence,
    bbox: w.bbox
  }));

  console.log(`üü¢ [Debug] OCR –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤: ${words.length}`);
  console.log('–ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤—ã—Ö 5 —Å–ª–æ–≤:', words.slice(0, 5));

  return words;
}
