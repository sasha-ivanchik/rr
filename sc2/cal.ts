import { Page } from '@playwright/test';
import Tesseract from 'tesseract.js';
import fs from 'fs';
import path from 'path';

export async function extractWordsFromViewport(page: Page) {
  console.log('üü¢ [Debug] –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ .—Ç—Å—Ç');

  // 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä (–≤—å—é–ø–æ—Ä—Ç)
  const container = await page.$('.—Ç—Å—Ç');
  if (!container) throw new Error('Container not found');

  console.log('üü¢ [Debug] –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...');
  const boundingBox = await container.boundingBox();
  if (!boundingBox) throw new Error('Cannot get bounding box of container');

  const screenshotBuffer = await container.screenshot({
    clip: {
      x: boundingBox.x,
      y: boundingBox.y,
      width: Math.min(boundingBox.width, page.viewportSize()?.width || 800),
      height: Math.min(boundingBox.height, page.viewportSize()?.height || 600)
    }
  });
  console.log('üü¢ [Debug] –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω, —Ä–∞–∑–º–µ—Ä (–±–∞–π—Ç):', screenshotBuffer.length);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –¥–µ–±–∞–≥–∞
  const screenshotPath = path.join(process.cwd(), 'viewport_debug.png');
  fs.writeFileSync(screenshotPath, screenshotBuffer);
  console.log('üíæ [Debug] –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞:', screenshotPath);

  // 2Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º canvas –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
  const dataUrl = await page.evaluate((buffer) => {
    return new Promise<string>((resolve) => {
      const img = new Image();
      img.onload = () => {
        console.log('üü¢ [Debug] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ canvas');
        const temp = document.createElement('canvas');
        temp.width = img.width * 2;   // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞—Å—à—Ç–∞–± 2x
        temp.height = img.height * 2;
        const ctx = temp.getContext('2d')!;
        ctx.drawImage(img, 0, 0, temp.width, temp.height);
        console.log(`üü¢ [Debug] –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${temp.width}x${temp.height}`);

        // –ü–æ–≤—ã—à–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å
        const imgData = ctx.getImageData(0, 0, temp.width, temp.height);
        const data = imgData.data;
        for (let i = 0; i < data.length; i += 4) {
          for (let c = 0; c < 3; c++) {
            let val = data[i + c];
            val = ((val - 128) * 1.5 + 128); // –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ 1.5
            data[i + c] = Math.min(255, Math.max(0, val));
          }
        }
        ctx.putImageData(imgData, 0, 0);
        console.log('üü¢ [Debug] –ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∞');

        resolve(temp.toDataURL('image/png'));
      };

      img.onerror = (err) => {
        console.error('‚ùå [Debug] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ canvas', err);
        resolve('');
      };

      img.src = 'data:image/png;base64,' + buffer.toString('base64');
    });
  }, screenshotBuffer);

  if (!dataUrl) throw new Error('Failed to create canvas image for OCR');

  console.log('üîç [Debug] –ü–µ—Ä–µ–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Tesseract...');
  const result = await Tesseract.recognize(dataUrl, 'eng', {
    tessedit_char_whitelist: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,:- '
  });

  const words = result.data.words.map(w => ({
    text: w.text,
    conf: w.confidence,
    bbox: w.bbox
  }));

  console.log('üü¢ [Debug] OCR –∑–∞–≤–µ—Ä—à–µ–Ω');
  console.log(`üü¢ [Debug] –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤: ${words.length}`);
  console.log('–ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤—ã—Ö 5 —Å–ª–æ–≤:', words.slice(0, 5));

  return words;
}
